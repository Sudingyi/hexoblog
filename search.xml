<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My first blog</title>
    <url>/sublog.github.io/2020/03/13/My-first-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script>
    <div id="aplayer-fMDGhynA" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2919622" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"
    ></div>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//熄灯问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> old[<span class="number">10</span>], lights[<span class="number">10</span>], result[<span class="number">10</span>];  <span class="comment">//原数组，灯数组，结果数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBit</span><span class="params">(<span class="keyword">char</span> &amp;c, <span class="keyword">int</span> i, <span class="keyword">int</span> v)</span>  <span class="comment">//c代表第i行的字符，把第i行的第j位设置成v</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v) &#123;</span><br><span class="line">        c = c | (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        c = c &amp; ~(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//v = 1</span></span><br><span class="line"><span class="comment">//如果把第3位上的设置为1</span></span><br><span class="line"><span class="comment">//0010 0101 </span></span><br><span class="line"><span class="comment">//0010 0101 | 0000 1000 = 0010 1101   按位或运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//v = 0</span></span><br><span class="line"><span class="comment">//如果把第2位上的位设置为0</span></span><br><span class="line"><span class="comment">//0010 0101</span></span><br><span class="line"><span class="comment">//~（1  &lt;&lt; 2）= ~(0000 0100) = (1111 1011)</span></span><br><span class="line"><span class="comment">//0010 0101 &amp; 1111 1011 = 0010 0001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBit</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span>  <span class="comment">//取出c的第i位上的数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0010   0001  右移3位   0000   0100 &amp; 0000  0001 = 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilpBit</span><span class="params">(<span class="keyword">char</span> &amp;c, <span class="keyword">int</span> i)</span>   <span class="comment">//翻转c的第i位</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c = c ^ (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0010 0101</span></span><br><span class="line"><span class="comment">//翻转第3位上的数字</span></span><br><span class="line"><span class="comment">//0010 0101 ^ 0000 1000 = 0010 1101</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutPutResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; GetBit(result[i], j);</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">5</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> kase;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;kase;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= kase ;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="keyword">int</span> v, switchs;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">	            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">	            SetBit(old[i], j, v);</span><br><span class="line">	        &#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">1</span> &lt;&lt; <span class="number">6</span>; ++n) &#123;  <span class="comment">//6个开关，2的6次方种情况，  (1 &lt;&lt; 6 == 2^6)</span></span><br><span class="line">	        <span class="built_in">memcpy</span>(lights, old, <span class="keyword">sizeof</span>(old));  <span class="comment">//还原lights数组</span></span><br><span class="line">	        switchs = n;</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">	            result[i] = switchs;  <span class="comment">//  0 0 1 0 1 0</span></span><br><span class="line">	            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">	                <span class="keyword">if</span>(GetBit(switchs, j)) &#123;</span><br><span class="line">	                    <span class="keyword">if</span>(j &gt; <span class="number">0</span>) FilpBit(lights[i], j - <span class="number">1</span>);  <span class="comment">//翻转左边</span></span><br><span class="line">	                    FilpBit(lights[i], j); <span class="comment">//翻转本身</span></span><br><span class="line">	                    <span class="keyword">if</span>(j &lt; <span class="number">5</span>) FilpBit(lights[i], j + <span class="number">1</span>); <span class="comment">//翻转右边</span></span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">if</span>(i &lt; <span class="number">4</span>) lights[i + <span class="number">1</span>] ^= switchs;</span><br><span class="line">	            switchs = lights[i];</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">if</span>(lights[<span class="number">4</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">	        	<span class="built_in">printf</span>(<span class="string">"PUZZLE #%d\n"</span>,i);</span><br><span class="line">	            OutPutResult();</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>page</title>
    <url>/sublog.github.io/2020/06/03/page/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/sublog.github.io/2020/03/13/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>tip</tag>
      </tags>
  </entry>
  <entry>
    <title>花书 --应用数学与机器学习基础</title>
    <url>/sublog.github.io/2020/06/25/%E8%8A%B1%E4%B9%A6-%E5%BA%94%E7%94%A8%E6%95%B0%E5%AD%A6%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><hr>
<blockquote id="fn_top_img">
<sup>top_img</sup>. 莱辛巴赫瀑布，瑞士伯尼尔高地<a href="#reffn_top_img" title="Jump back to footnote [top_img] in the text."> &#8617;</a>
</blockquote>
<p><del>以下皆为本人花书的笔记</del></p>
<h3 id="标量、向量、矩阵和张量"><a href="#标量、向量、矩阵和张量" class="headerlink" title="标量、向量、矩阵和张量"></a>标量、向量、矩阵和张量</h3><p><font color="#0000dd">标量</font>：一个标量就是一个单独的数。用斜体表示标量。当我们介绍标量时，会明确它们是哪种类型的数。</p>
<p>​        例：实数标量：“令<em>s</em>∈R表示一条线的斜率”；自然数标量：”令<em>n</em>∈N表示元素的数目”。</p>
<p><font color="#0000dd">向量</font>：一个向量就是一列数。这些数有序排列。通常我们赋予向量粗体小写变量名称，比如<strong>x</strong>。向量<strong>x</strong>的第一个元素x1……如果每个元素都属于R，并且该向量有n个元素，那么该向量属于实数集R的n次笛卡尔乘积构成的集合，记为Rn。当需要明确表示向量元素是，我们会将元素排列成一个方括号包围的纵列：</p>
<p><img src= "/sublog.github.io/img/loading.gif" data-src="https://i.loli.net/2020/06/25/uSeznLZmQ8RMBci.png" alt="image-20200625165749119.png"></p>
<p>当我们需要索引向量中的一些元素，我们定义一个包含这些元素索引的集合，然后将该集合写在脚标处。</p>
<p>​        例：指定x1，x3，x5,定义集合S = {1,3,5}，然后写作<strong>x</strong>~s~</p>
<p>​                同时我们用符号_表示集合补集的索引，<strong>x</strong> _~1~表示<strong>x</strong>中除了x1外的元素，而<strong>x</strong> _~S~表示<strong>x</strong>中除了x1,x3,x5外的所有元素构成的向量。</p>
<p>==矩阵==： 二维数组。赋予粗体大写变量名称，<strong>A</strong>。A~1，1~表示左上的元素。我们通过用”:”表示水平坐标，以表示垂直坐标i中的所有元素。<strong>A</strong>~i,:~ 表示 <strong>A</strong> 中垂直坐标 <em>i</em> 上的一横排元素。这也被称为 <strong>A</strong> 的第 <em>i</em> 行（row）。<em>f</em>(<strong>A</strong>)<em>i,j</em> 表示函数 <em>f</em> 作用在 <strong>A</strong> 上输出的矩阵的第 <em>i</em> 行第 <em>j</em> 列元素。</p>
<p>==张量==： 一般地，一个数组中的元素分布在若干维坐标的规则网格中，我们称之为张量。我们使用字体 <strong>A</strong> 来表示张量 “A’’。张量 <strong>A</strong> 中坐标为 (<em>i, j, k</em>) 的元素记作 <em>A</em>~i,j,k~。</p>
<h3 id="矩阵和向量相乘"><a href="#矩阵和向量相乘" class="headerlink" title="矩阵和向量相乘"></a>矩阵和向量相乘</h3><p>==转置==：以主对角线为轴的镜像。我们将矩阵 <strong>A</strong> 的转置表示为 <strong>A</strong>^⊤^，</p>
<p>​                        定义如下  (<strong>A</strong>⊤<em>)</em>~i,j~ = <em>A<strong>~j,i~</strong>.</em> </p>
<ol>
<li>只要矩阵的形状一样，我们可以把两个矩阵相加。两个矩阵相加是指对应位置的元素相加，比如 <strong>C</strong> = <strong>A</strong> + <strong>B</strong>，其中 <em>C</em>~i,j~ = <em>A</em>~i,j~ + <em>B</em>~i,j~。</li>
<li>标量和矩阵相乘，或是和矩阵相加时，我们只需将其与矩阵的每个元素相乘或相加，比如 <strong>D</strong> = <em>a</em> <em>·</em> <strong>B</strong> + <em>c</em>，其中 <em>D</em>~i,j~= <em>a</em> <em>·</em> <em>B</em>~i,j~ + <em>c</em></li>
<li>在深度学习中，我们也使用一些不那么常规的符号。我们允许矩阵和向量相加，产生另一个矩阵：<strong>C</strong> = <strong>A</strong> + <strong>b</strong>，其中 <em>C</em>~i,j~ = <em>A</em>~i,j~ + <em>b</em>~j~。。这个简写方法使我们无需在加法操作前定义一个将向量 <strong>b</strong> 复制到每一行而生成的矩阵。这种隐式地复制向量 <strong>b</strong> 到很多位置的方式，被称为 广播。</li>
</ol>
<p>矩阵相乘：<img src= "/sublog.github.io/img/loading.gif" data-src="https://i.loli.net/2020/06/25/X5MsvRouW1piVBA.png" alt="image-20200625182340300.png"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
</search>
